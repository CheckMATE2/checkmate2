#ifndef ATLAS_2211_08028_H_
#define ATLAS_2211_08028_H_
// AUTHOR: K. Rolbiecki
//  EMAIL: krolb@fuw.edu.pl
#include "AnalysisBase.h"

#ifdef HAVE_ONNX
#include <onnxruntime_cxx_api.h>
#endif

class Atlas_2211_08028 : public AnalysisBase {
  public:
    Atlas_2211_08028() : AnalysisBase()  {}               
    ~Atlas_2211_08028() {}
  
    void initialize();
    void analyze();        
    void finalize();

  private:

    TFile *hfile;  TH1F *nngtt; TH1F *nngbb; 
    const double mean[87]={348.82672119140625,0.001224843435920775,0.011215382255613804,35.01051712036133,0.4123765528202057,205.96482849121094,0.000866758287884295,0.0026113702915608883,21.943532943725586,0.5219350457191467,131.5203399658203,0.0014234248083084822,0.0028221921529620886,14.679434776306152,0.4859117269515991,89.95111083984375,0.0024308657739311457,0.003201194340363145,10.921121597290039,0.41861748695373535,51.72813415527344,0.002211648505181074,0.001059219939634204,6.8958611488342285,0.2480594962835312,29.507577896118164,0.0014721028273925185,0.0011491943150758743,4.127583026885986,0.1373944729566574,16.116954803466797,0.0008737104362808168,0.0005380049697123468,2.326930522918701,0.07252819091081619,8.416145324707031,0.000563444453291595,0.0004173719498794526,1.2422566413879395,0.036873701959848404,4.170749664306641,0.0005186111084185541,0.0001961462403414771,0.6271772384643555,0.017829529941082,1.9352974891662598,2.8667405786109157e-05,0.00025558529887348413,0.2950354516506195,0.008070512674748898,388.2679443359375,0.0005678863381035626,0.010501296259462833,75.08436584472656,201.22515869140625,0.0007426381343975663,-0.0012021028669551015,37.745521545410156,86.0351333618164,0.0001722413144307211,0.00024551310343667865,14.23154354095459,28.54050636291504,7.828087836969644e-05,0.0004572096804622561,4.361158847808838,52.769752502441406,0.00055172317661345,-0.004927645903080702,0.03030405007302761,3.7328639030456543,3.698996079037897e-05,9.778635285329074e-05,0.0030516863334923983,0.23780983686447144,-1.23310519484221e-05,-5.973678707960062e-05,0.0002457579248584807,0.009709575213491917,-7.139377089515619e-07,9.422020411875565e-06,1.2358904314169195e-05,272.284423828125,3.157931327819824,0.5684433579444885,1924.33984375,813.9981079101562}; 
    
    const double std[87]={260.26678466796875,1.043735384941101,1.8061413764953613,31.465930938720703,0.48998895287513733,158.85206604003906,1.0634719133377075,1.8049265146255493,19.196178436279297,0.49979639053344727,95.81076049804688,1.1140797138214111,1.8063502311706543,10.480488777160645,0.499955415725708,61.92335510253906,1.1796157360076904,1.806037187576294,6.566783428192139,0.48769065737724304,46.49405288696289,1.0528481006622314,1.561020016670227,5.663470268249512,0.41597431898117065,36.96717834472656,0.8779095411300659,1.279522180557251,4.860283851623535,0.33421754837036133,28.791873931884766,0.6928571462631226,1.0022454261779785,3.9111227989196777,0.25323963165283203,19.419239044189453,0.5242016315460205,0.7574199438095093,2.817417860031128,0.1853451132774353,13.448785781860352,0.3827989995479584,0.5529165267944336,2.029693365097046,0.13118404150009155,9.043235778808594,0.26963910460472107,0.3887377977371216,1.4025100469589233,0.08914224058389664,286.4169921875,0.8792079091072083,1.7478116750717163,76.41952514648438,198.80892944335938,0.7650731801986694,1.5172309875488281,50.877689361572266,126.01263427734375,0.6058558821678162,1.156052827835083,26.713064193725586,68.72575378417969,0.40241798758506775,0.740081787109375,13.1954927444458,83.16204071044922,0.7241584062576294,1.3046456575393677,0.05489525943994522,19.12066078186035,0.24320338666439056,0.42904603481292725,0.01846902072429657,4.206113815307617,0.07045941799879074,0.12233318388462067,0.005232449620962143,0.7187768816947937,0.016513027250766754,0.027744540944695473,0.001166886300779879,239.20870971679688,1.8090277910232544,0.48885977268218994,471.8238525390625,555.2835693359375};

#ifdef HAVE_ONNX    
    Ort::Session *session;
    std::vector<int64_t> input_node_dims;
    const int input_tensor_size = 87;
    std::vector<const char*> input_names = {"input_1"};
    std::vector<const char*> output_names = {"dense_4"};
    std::vector<int64_t> input_dims = {1, 87};
#endif    
        
    std::vector<Jet*> signal_jets = {};
    std::vector<Jet*> bjets = {};
    std::vector<fastjet::PseudoJet> trimmedJets = {};
    std::vector<Electron*> signal_el = {};
    std::vector<Muon*> signal_mu = {};
    std::vector<FinalStateObject*> signalLeps = {};
    TLorentzVector pTmiss = TLorentzVector(0.,0.,0.,0.);
    double mT_lep = 0.;
    double mT_b = 0.;
    double meff = 0.;
    double MJ = 0.;
    double dphimin = 0.;
    
    static bool sortByPT(Jet *i, Jet *j);
    double get_meff();
    bool check_nTrack_jet(Jet* jet, std::vector<Track*> tracks, int nTracksMin);
    std::vector<Jet*> overlapRemoval_muon_jet_tracks(std::vector<Jet*> cand_jets, std::vector<Muon*> cand_muons, double deltaR, int nTracks);
    bool PassesCuts_Gtt1L(int Njet, int Nbjet, double met, double meff_cut, double mT_cut, double mTb_cut, double MJ_cut, bool cutflow, std::string sr);
    bool PassesCuts_Gtt0L(int Njet, int Nbjet, double met, double meff_cut, double mTb_cut, double MJ_cut, bool cutflow, std::string sr);
    bool PassesCuts_Gtb(int Njet, int Nbjet, double meff_cut, double met, double MJ_cut, bool cutflow, std::string sr);
    bool PassesCuts_Gbb(int Njet, int Nbjet, double met, double ptj1, double meff_cut, bool cutflow, std::string sr);
    bool PassesCutsCR_Gtt1L(int Njet, int Nbjet, double met, double meff_cut, double mT_cut, std::string sr);
    bool PassesCuts_NN(int ttbb, double mg, double mneut, double cutoff, int srnum, std::string sr);
    std::vector<double> jet_btag_category();
    std::string print_shape(const std::vector<int64_t>& v);

};

#endif
